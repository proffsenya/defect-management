"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞
"""
import pytest
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

class TestUtils:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç"""
    
    def test_unit_date_utils(self):
        """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–∞—Ç...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ ISO –¥–∞—Ç—ã
        now = datetime.now()
        iso_now = now.isoformat()
        
        assert isinstance(iso_now, str)
        assert 'T' in iso_now
        assert len(iso_now) >= 19  # –ú–∏–Ω–∏–º—É–º YYYY-MM-DDTHH:MM:SS
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã N –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        days_ago = 5
        past_date = now - timedelta(days=days_ago)
        iso_past = past_date.isoformat()
        
        assert isinstance(iso_past, str)
        assert past_date < now
        
        print("‚úÖ –£—Ç–∏–ª–∏—Ç—ã –¥–∞—Ç —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_unit_id_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ID...")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
        import time
        import random
        
        def generate_id(prefix="d"):
            timestamp = str(int(time.time() * 1000))
            random_part = str(random.randint(1000, 9999))
            return f"{prefix}_{timestamp}_{random_part}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ ID
        ids = [generate_id("d") for _ in range(5)]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        assert len(set(ids)) == len(ids), "ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        for id_val in ids:
            assert id_val.startswith("d_")
            assert len(id_val) > 10
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_unit_csv_escaping(self):
        """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è CSV"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ CSV...")
        
        def escape_csv(value):
            if value is None:
                return ""
            value = str(value)
            if ',' in value or '"' in value or '\n' in value:
                return f'"{value.replace('"', '""')}"'
            return value
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        test_cases = [
            ("simple text", "simple text"),
            ("text,with,commas", '"text,with,commas"'),
            ('text with "quotes"', '"text with ""quotes"""'),
            ("text\nwith\nnewlines", '"text\nwith\nnewlines"'),
            (None, ""),
            ("", ""),
        ]
        
        for input_val, expected in test_cases:
            result = escape_csv(input_val)
            assert result == expected, f"–û—à–∏–±–∫–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è '{input_val}'"
        
        print("‚úÖ –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ CSV —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_unit_priority_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤...")
        
        valid_priorities = ["low", "medium", "high", "critical"]
        
        def is_valid_priority(priority):
            return priority in valid_priorities
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        for priority in valid_priorities:
            assert is_valid_priority(priority), f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç '{priority}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        invalid_priorities = ["", "invalid", "LOW", "medium ", None, 123]
        for priority in invalid_priorities:
            assert not is_valid_priority(priority), f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç '{priority}' –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_unit_status_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤...")
        
        valid_statuses = ["new", "in_progress", "in_review", "closed", "cancelled"]
        
        def is_valid_status(status):
            return status in valid_statuses
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        for status in valid_statuses:
            assert is_valid_status(status), f"–°—Ç–∞—Ç—É—Å '{status}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        invalid_statuses = ["", "invalid", "NEW", "new ", None, 123]
        for status in invalid_statuses:
            assert not is_valid_status(status), f"–°—Ç–∞—Ç—É—Å '{status}' –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_unit_email_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é email...")
        
        import re
        
        def is_valid_email(email):
            if not email or not isinstance(email, str):
                return False
            pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            return bool(re.match(pattern, email))
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ email
        valid_emails = [
            "test@example.com",
            "user.name@domain.co.uk",
            "admin@company.org",
            "test+tag@example.com"
        ]
        
        for email in valid_emails:
            assert is_valid_email(email), f"Email '{email}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ email
        invalid_emails = [
            "",
            "invalid-email",
            "@example.com",
            "test@",
            "test@.com",
            None,
            123
        ]
        
        for email in invalid_emails:
            assert not is_valid_email(email), f"Email '{email}' –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_unit_password_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–æ–ª–µ–π...")
        
        def is_valid_password(password):
            if not password or not isinstance(password, str):
                return False
            return len(password) >= 6
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
        valid_passwords = ["password123", "123456", "qwerty", "admin123"]
        for password in valid_passwords:
            assert is_valid_password(password), f"–ü–∞—Ä–æ–ª—å '{password}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
        invalid_passwords = ["", "12345", "pass", None, 123456]
        for password in invalid_passwords:
            assert not is_valid_password(password), f"–ü–∞—Ä–æ–ª—å '{password}' –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_unit_role_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–æ–ª–µ–π"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–æ–ª–µ–π...")
        
        valid_roles = ["admin", "manager", "engineer", "user", "observer"]
        
        def is_valid_role(role):
            return role in valid_roles
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–æ–ª–∏
        for role in valid_roles:
            assert is_valid_role(role), f"–†–æ–ª—å '{role}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–æ–ª–∏
        invalid_roles = ["", "invalid", "ADMIN", "admin ", None, 123]
        for role in invalid_roles:
            assert not is_valid_role(role), f"–†–æ–ª—å '{role}' –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π"
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_unit_json_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON...")
        
        import json
        
        def safe_json_parse(json_str, default=None):
            try:
                return json.loads(json_str) if json_str else default
            except (json.JSONDecodeError, TypeError):
                return default
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π JSON
        valid_json = '{"key": "value", "number": 123}'
        result = safe_json_parse(valid_json)
        assert result == {"key": "value", "number": 123}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        result = safe_json_parse("")
        assert result is None
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
        invalid_json = '{"key": "value", "number": 123'  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
        result = safe_json_parse(invalid_json)
        assert result is None
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º None
        result = safe_json_parse(None)
        assert result is None
        
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_unit_string_utilities(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã...")
        
        def truncate_string(text, max_length=50):
            if not text:
                return ""
            if len(text) <= max_length:
                return text
            return text[:max_length-3] + "..."
        
        def clean_string(text):
            if not text:
                return ""
            return text.strip().replace('\n', ' ').replace('\r', ' ')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–µ–∑–∫—É —Å—Ç—Ä–æ–∫–∏
        long_text = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–∞"
        truncated = truncate_string(long_text, 20)
        assert len(truncated) <= 20
        assert truncated.endswith("...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç—Ä–æ–∫–∏
        dirty_text = "  –¢–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏\n–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏  "
        cleaned = clean_string(dirty_text)
        assert cleaned == "–¢–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        assert truncate_string("") == ""
        assert clean_string("") == ""
        
        print("‚úÖ –°—Ç—Ä–æ–∫–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
