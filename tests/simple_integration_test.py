#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import sys
import os
import json
from datetime import datetime

def test_data_consistency():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
    project_data = {
        "id": "p1",
        "name": "–ñ–ö –°–µ–≤–µ—Ä–Ω—ã–π",
        "code": "NORTH-01",
        "location": "–ú–æ—Å–∫–≤–∞",
        "stages": [
            {"id": "s1", "name": "–§—É–Ω–¥–∞–º–µ–Ω—Ç", "startDate": "2024-01-01T00:00:00.000Z"},
            {"id": "s2", "name": "–ö–∞—Ä–∫–∞—Å", "startDate": "2024-02-01T00:00:00.000Z"}
        ]
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ["id", "name", "code", "location", "stages"]
    for field in required_fields:
        assert field in project_data, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    assert isinstance(project_data["id"], str)
    assert isinstance(project_data["name"], str)
    assert isinstance(project_data["stages"], list)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç—Ç–∞–ø–æ–≤
    for stage in project_data["stages"]:
        assert "id" in stage
        assert "name" in stage
        assert "startDate" in stage
    
    print("‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    return True

def test_defect_workflow():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–µ—Ñ–µ–∫—Ç–æ–≤...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–µ—Ñ–µ–∫—Ç–∞
    defect_states = ["new", "in_progress", "in_review", "closed"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    valid_statuses = ["new", "in_progress", "in_review", "closed", "cancelled"]
    for state in defect_states:
        assert state in valid_statuses, f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}"
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    current_state = "new"
    transitions = {
        "new": ["in_progress", "cancelled"],
        "in_progress": ["in_review", "cancelled"],
        "in_review": ["closed", "in_progress"],
        "closed": [],
        "cancelled": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    for state, next_states in transitions.items():
        for next_state in next_states:
            assert next_state in valid_statuses, f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥: {state} -> {next_state}"
    
    print("‚úÖ –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True

def test_user_permissions():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –∏ –∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    roles_permissions = {
        "admin": ["read", "write", "delete", "manage_users", "export", "create"],
        "manager": ["read", "write", "delete", "export"],
        "engineer": ["read", "write", "create"],
        "user": ["read"],
        "observer": ["read"]
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–æ–ª–∏ –∏–º–µ—é—Ç –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    for role, perms in roles_permissions.items():
        assert "read" in perms, f"–†–æ–ª—å {role} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —á—Ç–µ–Ω–∏–µ"
        assert len(perms) > 0, f"–†–æ–ª—å {role} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    admin_perms = set(roles_permissions["admin"])
    for role, perms in roles_permissions.items():
        if role != "admin":
            role_perms = set(perms)
            assert admin_perms.issuperset(role_perms), f"–ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–ª–∏ {role}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    all_permissions = set()
    for perms in roles_permissions.values():
        all_permissions.update(perms)
    
    assert len(all_permissions) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

def test_data_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
    
    # –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–∞
    def validate_defect(defect):
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ["title", "projectId", "priority"]
        for field in required_fields:
            if not defect.get(field):
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        valid_priorities = ["low", "medium", "high", "critical"]
        if defect.get("priority") not in valid_priorities:
            errors.append(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {defect.get('priority')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        valid_statuses = ["new", "in_progress", "in_review", "closed", "cancelled"]
        if defect.get("status") and defect.get("status") not in valid_statuses:
            errors.append(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å: {defect.get('status')}")
        
        return errors
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç
    valid_defect = {
        "title": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ—Ñ–µ–∫—Ç",
        "projectId": "p1",
        "priority": "high",
        "status": "new"
    }
    
    errors = validate_defect(valid_defect)
    assert len(errors) == 0, f"–í–∞–ª–∏–¥–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ—à–∏–±–æ–∫: {errors}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç
    invalid_defect = {
        "title": "",
        "projectId": "p1",
        "priority": "invalid_priority",
        "status": "invalid_status"
    }
    
    errors = validate_defect(invalid_defect)
    assert len(errors) > 0, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ—à–∏–±–∫–∏"
    
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_api_response_format():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤ API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ API...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤
    api_response = {
        "items": [
            {
                "id": "d1",
                "title": "–î–µ—Ñ–µ–∫—Ç 1",
                "status": "new",
                "priority": "high",
                "createdAt": "2024-01-01T00:00:00.000Z"
            }
        ],
        "total": 1,
        "page": 1,
        "pageSize": 20
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    assert "items" in api_response
    assert "total" in api_response
    assert "page" in api_response
    assert "pageSize" in api_response
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    assert isinstance(api_response["items"], list)
    assert isinstance(api_response["total"], int)
    assert isinstance(api_response["page"], int)
    assert isinstance(api_response["pageSize"], int)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if api_response["items"]:
        item = api_response["items"][0]
        required_item_fields = ["id", "title", "status", "priority", "createdAt"]
        for field in required_item_fields:
            assert field in item, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ: {field}"
    
    print("‚úÖ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ API –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True

def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ flare-lab")
    print("=" * 50)
    
    tests = [
        test_data_consistency,
        test_defect_workflow,
        test_user_permissions,
        test_data_validation,
        test_api_response_format
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            test_func()
            passed += 1
        except Exception as e:
            print(f"‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç {test_func.__name__} –ù–ï –ü–†–û–®–ï–õ: {e}")
            failed += 1
    
    print("=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed}")
    print(f"üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{passed + failed}")
    
    if failed == 0:
        print("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        return False

if __name__ == "__main__":
    success = run_integration_tests()
    sys.exit(0 if success else 1)
