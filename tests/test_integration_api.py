"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è API endpoints
"""
import pytest
import requests
import json
import time

class TestIntegrationAPI:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API"""
    
    def test_integration_user_registration_and_login(self, server_process, auth_headers):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = {
            "email": "integration_test@example.com",
            "password": "test123",
            "role": "engineer"
        }
        
        response = requests.post("http://localhost:8080/api/register", json=new_user)
        assert response.status_code in [201, 409], f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code} - {response.text}"
        
        # –¢–µ—Å—Ç –≤—Ö–æ–¥–∞
        login_data = {
            "email": new_user["email"],
            "password": new_user["password"]
        }
        
        response = requests.post("http://localhost:8080/api/login", json=login_data)
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code} - {response.text}"
        
        user_data = response.json()["user"]
        assert user_data["email"] == new_user["email"]
        assert user_data["role"] == new_user["role"]
        
        print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_integration_defect_crud_operations(self, server_process, auth_headers):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞
        new_defect = {
            "projectId": "p1",
            "title": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–µ—Ñ–µ–∫—Ç–∞",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞",
            "priority": "high",
            "assigneeId": "u2",
            "dueDate": "2024-12-31T23:59:59.000Z"
        }
        
        response = requests.post(
            "http://localhost:8080/api/defects",
            json=new_defect,
            headers=auth_headers
        )
        assert response.status_code == 201, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–∞: {response.status_code} - {response.text}"
        
        created_defect = response.json()
        defect_id = created_defect["id"]
        assert created_defect["title"] == new_defect["title"]
        assert created_defect["status"] == "new"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞
        response = requests.get(
            f"http://localhost:8080/api/defects/{defect_id}",
            headers=auth_headers
        )
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–∞: {response.status_code} - {response.text}"
        
        retrieved_defect = response.json()
        assert retrieved_defect["id"] == defect_id
        assert retrieved_defect["title"] == new_defect["title"]
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞
        update_data = {
            "title": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
            "priority": "critical",
            "status": "in_progress"
        }
        
        response = requests.patch(
            f"http://localhost:8080/api/defects/{defect_id}",
            json=update_data,
            headers=auth_headers
        )
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–∞: {response.status_code} - {response.text}"
        
        updated_defect = response.json()
        assert updated_defect["title"] == update_data["title"]
        assert updated_defect["priority"] == update_data["priority"]
        
        print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_integration_defect_filtering_and_pagination(self, server_process, auth_headers):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–µ—Ñ–µ–∫—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤
        response = requests.get(
            "http://localhost:8080/api/defects",
            headers=auth_headers
        )
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤: {response.status_code} - {response.text}"
        
        defects_data = response.json()
        assert "items" in defects_data
        assert "total" in defects_data
        assert "page" in defects_data
        assert "pageSize" in defects_data
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        response = requests.get(
            "http://localhost:8080/api/defects?status=new",
            headers=auth_headers
        )
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É: {response.status_code} - {response.text}"
        
        filtered_defects = response.json()
        for defect in filtered_defects["items"]:
            assert defect["status"] == "new"
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        response = requests.get(
            "http://localhost:8080/api/defects?priority=high",
            headers=auth_headers
        )
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: {response.status_code} - {response.text}"
        
        # –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        response = requests.get(
            "http://localhost:8080/api/defects?page=1&pageSize=5",
            headers=auth_headers
        )
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {response.status_code} - {response.text}"
        
        paginated_defects = response.json()
        assert len(paginated_defects["items"]) <= 5
        assert paginated_defects["page"] == 1
        assert paginated_defects["pageSize"] == 5
        
        print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_integration_projects_and_statistics(self, server_process, auth_headers):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
        response = requests.get(
            "http://localhost:8080/api/projects",
            headers=auth_headers
        )
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {response.status_code} - {response.text}"
        
        projects = response.json()
        assert isinstance(projects, list)
        assert len(projects) > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        project = projects[0]
        assert "id" in project
        assert "name" in project
        assert "code" in project
        assert "location" in project
        assert "stages" in project
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        response = requests.get(
            "http://localhost:8080/api/defects/stats",
            headers=auth_headers
        )
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code} - {response.text}"
        
        stats = response.json()
        assert "byStatus" in stats
        assert "byPriority" in stats
        assert "monthlyCreated" in stats
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        assert isinstance(stats["byStatus"], dict)
        assert isinstance(stats["byPriority"], dict)
        assert isinstance(stats["monthlyCreated"], list)
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_integration_authentication_and_authorization(self, server_process, admin_headers):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É endpoint –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        response = requests.get("http://localhost:8080/api/projects")
        assert response.status_code == 401, f"Endpoint –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {response.status_code}"
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ —Å –≤–∞–ª–∏–¥–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        response = requests.get(
            "http://localhost:8080/api/projects",
            headers=admin_headers
        )
        assert response.status_code == 200, f"–î–æ—Å—Ç—É–ø —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å: {response.status_code}"
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–º—É endpoint
        response = requests.get(
            "http://localhost:8080/api/users",
            headers=admin_headers
        )
        assert response.status_code == 200, f"–ê–¥–º–∏–Ω—Å–∫–∏–π endpoint –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}"
        
        users = response.json()
        assert isinstance(users, list)
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–∂–µ–Ω–µ—Ä—Å–∫–æ–º—É endpoint
        response = requests.get(
            "http://localhost:8080/api/users/engineers",
            headers=admin_headers
        )
        assert response.status_code == 200, f"Endpoint –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}"
        
        engineers = response.json()
        assert isinstance(engineers, list)
        
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
